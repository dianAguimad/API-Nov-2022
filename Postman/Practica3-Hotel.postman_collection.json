{
	"info": {
		"_postman_id": "3c942c58-c989-495c-a09b-acc71437b1f3",
		"name": "Practica 3 - Hotel",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19592765"
	},
	"item": [
		{
			"name": "HealthCheck - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 201\", function(){",
							"    pm.expect(pm.response.code).to.eql(201)",
							"})",
							"",
							"pm.test(\"Validar que el status code response es 201\", function(){",
							"    pm.response.to.have.status(201)",
							"})",
							"",
							"pm.test(\"Validar que el status code response es OK\", () =>{",
							"    pm.response.to.have.status(\"Created\")",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ping",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "HealthCheck - Negative Test - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 404\", function(){",
							"    pm.expect(pm.response.code).to.eql(404)",
							"})",
							"",
							"pm.test(\"Validar que el response contiene el texto Not Found\", () =>{",
							"     pm.expect(pm.response.text()).to.include(\"Not Found\")",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/ping",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"ping"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateToken - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 200\", function(){",
							"    pm.expect(pm.response.code).to.eql(200)",
							"})",
							"",
							"pm.test(\"Validar que el body contiene la palabra 'token'\", () =>{",
							"     pm.expect(pm.response.text()).to.include(\"token\")",
							"})",
							"",
							"pm.test(\"Validar que el token es un string\", () =>{",
							"     pm.expect(pm.response.json().token).to.be.a(\"string\")",
							"})",
							"",
							"pm.test(\"Validar que el token tiene un tamaño de 15 caracteres\", () =>{",
							"     pm.expect(pm.response.json().token.length).to.be.equal(15)",
							"})",
							"",
							"pm.test(\"Validar que el campo token no es NULL\", () =>{",
							"     pm.expect(pm.response.json().token).not.to.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"",
							"// console.log(pm.response.text())",
							"// console.log(typeof pm.response.json().token) //sale en la consola que tipo de dato es el response \"string\"",
							"",
							"//Crear variables ",
							"var token = pm.response.json().token;",
							"pm.environment.set(\"token\",token)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\" : \"admin\",\n    \"password\" : \"password123\"\n}"
				},
				"url": {
					"raw": "https://{{url_base}}/auth",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateToken - Negative Test - Without body - 400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 400\", function(){",
							"    pm.expect(pm.response.code).to.eql(400)",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Bad credentials\", () =>{",
							"     pm.expect(pm.response.text()).to.contain(\"Bad credentials\")",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/auth",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking - 200",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")",
							"var deposit = pm.variables.replaceIn(\"{{$randomBoolean}}\")",
							"var date = pm.variables.replaceIn(\"{{$isoTimestamp}}\")",
							"var checkin = date.split('T'[0]);",
							"",
							"",
							"//settear variables",
							"pm.environment.set(\"nombre\", name);",
							"pm.environment.set(\"apellido\", lastName);",
							"pm.environment.set(\"precio\", price);",
							"pm.environment.set(\"deposito\", deposit);",
							"pm.environment.set(\"fecha\", checkin);",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseJson = pm.response.json();",
							"pm.environment.set(\"id\", responseJson.bookingid)//darle valor a la variable de entorno",
							"var name = pm.environment.get(\"nombre\")//traer la variable de entorno ",
							"",
							"pm.test(\"Validar que el codigo de respuesta es un 200\", function(){",
							"    pm.expect(pm.response.code).to.eql(200)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el nombre de la reserva sea igual a la variable\", () =>{",
							"     pm.expect(responseJson.booking.firstname).to.eql(name)",
							"})",
							"",
							"pm.test(\"Validar que el header Content-type contiene application Json\", () =>{",
							"     pm.expect(pm.response.headers.get(\"Content-Type\")).to.eql('application/json; charset=utf-8')",
							"})",
							"",
							"pm.test(\"Validar el tamaño de la variabe total\", () =>{",
							"     pm.expect(pm.response.size().total).to.be.below(1000)",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{nombre}}\",\n    \"lastname\" : \"{{apellido}}\",\n    \"totalprice\" : \"{{precio}}\",\n    \"depositpaid\" : \"{{deposito}}\",\n    \"bookingdates\" : {\n        \"checkin\" : \"{{fecha}}\",\n        \"checkout\" : \"{{fecha}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBooking - Negative Tests - Without body - 500",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 500\", function(){",
							"    pm.expect(pm.response.code).to.eql(500)",
							"})",
							"",
							"pm.test(\"Validar que la respuesta no este vacia\", () =>{",
							"     pm.expect(pm.response.text()).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Bad credentials\", () =>{",
							"     pm.expect(pm.response.text()).to.contain(\"Internal Server Error\")",
							"})",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 200\", function(){",
							"    pm.expect(pm.response.code).to.eql(200)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - Negative Tests -  200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.text();",
							"",
							"pm.test(\"Validar que el codigo de respuesta es un 404\", function(){",
							"    pm.expect(pm.response.code).to.eql(404)",
							"})",
							"",
							"pm.test(\"Validar que la respuesta no este vacia\", () =>{",
							"     pm.expect(response).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Not Found\", () =>{",
							"     pm.expect(response).to.contain(\"Not Found\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomID = pm.variables.replaceIn(\"{{$randomBankAccount}}\")",
							"pm.environment.set(\"randomID\", randomID);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{randomID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{randomID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 200\", function(){",
							"    pm.expect(pm.response.code).to.eql(200)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var name = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
							"var lastName = pm.variables.replaceIn(\"{{$randomLastName}}\")",
							"var price = pm.variables.replaceIn(\"{{$randomInt}}\")",
							"var deposit = pm.variables.replaceIn(\"{{$randomBoolean}}\")",
							"var date = pm.variables.replaceIn(\"{{$isoTimestamp}}\")",
							"var checkin = date.split('T'[0]);",
							"",
							"",
							"//settear variables",
							"pm.environment.set(\"nombre\", name);",
							"pm.environment.set(\"apellido\", lastName);",
							"pm.environment.set(\"precio\", price);",
							"pm.environment.set(\"deposito\", deposit);",
							"pm.environment.set(\"fecha\", checkin);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{nombre}}\",\n    \"lastname\" : \"{{apellido}}\",\n    \"totalprice\" : \"{{precio}}\",\n    \"depositpaid\" : \"{{deposito}}\",\n    \"bookingdates\" : {\n        \"checkin\" : \"{{fecha}}\",\n        \"checkout\" : \"{{fecha}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateBooking - Negative tests - Forbidden - 403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 403\", function(){",
							"    pm.expect(pm.response.code).to.eql(403)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Bad credentials\", () =>{",
							"     pm.expect(pm.response.text()).to.contain(\"Forbidden\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomID = pm.variables.replaceIn(\"{{$randomBankAccount}}\")",
							"pm.environment.set(\"randomID\", randomID);",
							"",
							"var randomToken = pm.variables.replaceIn(\"{{$randomBankAccountIban}}\")",
							"pm.environment.set(\"randomToken\", randomToken);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{randomToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"firstname\" : \"{{nombre}}\",\n    \"lastname\" : \"{{apellido}}\",\n    \"totalprice\" : \"{{precio}}\",\n    \"depositpaid\" : \"{{deposito}}\",\n    \"bookingdates\" : {\n        \"checkin\" : \"{{fecha}}\",\n        \"checkout\" : \"{{fecha}}\"\n    },\n    \"additionalneeds\" : \"Breakfast\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterUpdate - 200",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 200\", function(){",
							"    pm.expect(pm.response.code).to.eql(200)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterUpdate - Negative Tests - Random Id - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.text();",
							"",
							"pm.test(\"Validar que el codigo de respuesta es un 404\", function(){",
							"    pm.expect(pm.response.code).to.eql(404)",
							"})",
							"",
							"pm.test(\"Validar que la respuesta no este vacia\", () =>{",
							"     pm.expect(response).to.not.be.null;",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Bad credentials\", () =>{",
							"     pm.expect(response).to.contain(\"Not Found\")",
							"})",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"var randomName = pm.variables.replaceIn(\"{{$randomFirstName}}\")",
							"pm.environment.set(\"nombreRandom\", randomName);",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{randomID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{randomID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta no es un 201\", function(){",
							"    pm.expect(pm.response.code).to.eql(201)",
							"})",
							"",
							"",
							"pm.test(\"Validar que el responseSize es 7\", () =>{",
							"    pm.expect(pm.response.responseSize).to.be.eql(7);",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBooking - Negative Tests - 201",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 405\", function(){",
							"    pm.expect(pm.response.code).to.eql(405)",
							"})",
							"",
							"pm.test(\"Validar que el mensaje de la respuesta sea Bad credentials\", () =>{",
							"     pm.expect(pm.response.text()).to.contain(\"Method Not Allowed\")",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Cookie",
						"value": "token={{token}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://{{url_base}}/booking/{{randomID}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{randomID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingAfterDelete - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 404\", function(){",
							"    pm.expect(pm.response.code).to.eql(404)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/{{id}}",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBooking - negative test - 404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Validar que el codigo de respuesta es un 404\", function(){",
							"    pm.expect(pm.response.code).to.eql(404)",
							"})",
							"",
							"pm.test(\"Validar que el tiempo de respuesta es menor a 1s\", () =>{",
							"     pm.expect(pm.response.responseTime).to.be.below(1000)",
							"})",
							"",
							"pm.test(\"Validar que el body no este vacio\", () =>{",
							"     pm.expect(pm.response.body).not.to.be.null;",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://{{url_base}}/booking/878485484",
					"protocol": "https",
					"host": [
						"{{url_base}}"
					],
					"path": [
						"booking",
						"878485484"
					]
				}
			},
			"response": []
		}
	]
}